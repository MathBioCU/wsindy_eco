addpath(genpath('wsindy_obj_base'))
rng('shuffle');

%% data hyperparameters
seed1 = 2;   % seed for random generation selection, can just be pre-selected generations
% seed2 = randi(10^9);
% seed2 = rng().Seed; % seed for random noise
snr_X = 0.001; % noise level for X
snr_Y = 0.0; % noise level for Y
noise_alg_X = 'logn'; % noise distribution for X
noise_alg_Y = 'logn'; % noise distribution for Y

num_train_inds = -5; % number of generations observed / number of gens around each peak
train_time_frac = 0.75; % fraction of generations observed
subsamp_t = 2; % within-generation timescale multiplier

%% algorithmic hyperparameters
toggle_zero_crossing = 1; % halt simulations that are non-positive

phifun_Y = @(t)(1-t.^2).^9; % test function for continuous data
tf_Y_params = {'meth','FFT','param',2,'mtmin',3,'subinds',-3};% test function params

WENDy_args = {'maxits_wendy',5,...
    'lambdas',10.^linspace(-4,-1,50),'alpha',0.01,...
    'ittol',10^-4,'diag_reg',10^-6,'verbose',0};
autowendy = 0.95; % increment library approximate confidence interval with this confidence level 
tol = 5; % default heuristic increment, chosen when autowendy = 0.5;
tol_min = 0.1; % lower bound on rel. residual to increment library, in case covariance severely underestimated
tol_dd_learn = 10^-10;% ODE tolerance for forward solves in computing Y(T)
X_var = 'true';
use_true_IC = 'false';'true';

pmax_IC = 4; % max poly degree for IC solve
polys_Y_Yeq = 0:3; % Y library for Yeq solve
pmax_X_Yeq = 4; % max poly degree for X terms in Yeq solve
polys_X_Xeq = 0:2; % X library in Xeq solve
pmax_Y_Xeq = 3; % max poly degree for Y terms in Xeq solve
neg_Y = 0; % toggle use negative powers for X terms in Yeq
neg_X = 0; % toggle use negative powers for Y terms in Xeq
boolT = @(T)all([min(T,[],2)>=-2 sum(T,2)>=-2 max(T,[],2)<4],2); % restrict poly terms in Yeq
custom_tags_Y = {}; % custom Y tags for Yeq. Example: {[1+V zeros(1,nstates_Y-2) 1]}
custom_tags_X = {}; % custom X tags for Yeq
linregargs_fun_Y = @(WS){};
linregargs_fun_X = @(WS){};
%%% example:
% linregargs_fun_IC = @(WS){'Aineq',-WS.G{1},'bineq',zeros(size(WS.G{1},1),1)}; %%% enforce nonnegative IC map on data

%% post-processing
test_length = 40; % number of generations to test over
err_tol = 0.5; % tol for n_tol= number of generations for which cumulative rel err < tol
stop_tol = 100; % halt simulations if values exceed max observed by this multitude
toggle_sim = 1; % toggle perform diagnostic forward simulation
num_sim = 0; % number of out-of-sample testing simulations
oos_std = 0.2; % std of out-of-sample ICs, uniformly randomly sampled around training IC
toggle_vis = 0; % toggle plot diagnostics
toggle_view_data = 0; % toggle view data before alg runs
tol_dd_sim = 10^-10; % ODE tolerance (abs,rel) for diagnostic sim

%% get data
dr = '/home/danielmessenger/Dropbox/Boulder/research/data/dukic collab/';
% load([dr,'FH_feedback.mat']);
warning('off','MATLAB:dispatcher:UnresolvedFunctionHandle')
load([dr,'Gregs_mod_V=0.5.mat'],'Ycell','X','t_epi','custom_tags_X',...
    'yearlength','custom_tags_Y','linregargs_fun_IC','linregargs_fun_Y',...
    'linregargs_fun_X','nstates_X','nstates_Y','W_IC_true','tags_IC_true',...
    'W_Y_true','tags_X_true','tags_Y_true','W_X_true','tags_Ext_X_true','tags_Ext_Y_true',...
    'rhs_IC_true','rhs_Y_true','rhs_X_true','tn','t','Y','sig_tmax');
% gregs_evoMod;

rhs_IC = rhs_IC_true;

%% format data
[Y_train,X_train,train_inds,train_time,nstates_X,nstates_Y,X_in,sigma_X,sigma_Y,nX,nY] = ...
    format_data(Ycell,X,t_epi,subsamp_t,train_time_frac,num_train_inds,test_length,snr_X,snr_Y,...
    noise_alg_X,noise_alg_Y,seed1,seed2);
num_gen = size(X,1)-1;
num_t_epi = length(t_epi{1});
if isequal(X_var,'true')
    X_var = max(sigma_X,0);
end
if toggle_view_data==1 %%% view data
    for j=1:nstates_X
        subplot(2,1,j)
        plot(tn,X(:,j),'b-.',t,Y(:,j),'r-',(train_inds-1)*yearlength,X_train(:,j)*nX(j),'kx','linewidth',3,'markersize',10)
        legend({'X','Y','I'})
    end
    pause
end

%% run alg
tic;
% [rhs_IC,rhs_Y,W_Y,rhs_X,W_X,...
%    lib_Y_Yeq,lib_X_Yeq,lib_Y_Xeq,lib_X_Xeq,...
%     WS_Yeq,WS_Xeq,...
%     CovW_Y,CovW_X,...
%     errs_Yend,...
%     loss_Y,loss_X]= ...
%     wsindy_eco_fcn_fixedIC(toggle_zero_crossing,stop_tol,phifun_Y,tf_Y_params,WENDy_args,autowendy,tol,tol_min,tol_dd_learn,polys_Y_Yeq,polys_X_Xeq,pmax_X_Yeq,pmax_Y_Xeq,neg_Y,boolT,...
%         Y_train,X_train,X_var,train_inds,train_time,t_epi,yearlength,nstates_X,nstates_Y,X_in,nX,nY,...
%         custom_tags_X,custom_tags_Y,linregargs_fun_Y,linregargs_fun_X,rhs_IC_true);


    if isempty(X_var)
        X_var = X_train*0;
    end

    addpath(genpath('wsindy_obj_base'))

%%% get wsindy_data 
    Uobj_Y = cellfun(@(x,t)wsindy_data(x,t),Y_train,train_time);
    Uobj_tot = arrayfun(@(i)...
        wsindy_data([[Uobj_Y(i).Uobs{:}] repmat(X_train(X_in(i),:),Uobj_Y(i).dims,1)],train_time{i}),(1:length(Uobj_Y))');
    foo = arrayfun(@(U)U.estimate_sigma('set',true),Uobj_tot,'uni',0);
    for j=1:length(Uobj_tot)
        Uobj_tot(j).sigmas(nstates_Y+1:end) = num2cell(X_var(X_in(j),:));
    end

    E = eye(nstates_Y+nstates_X);
        
%%% get parametric small scale model
    tf_Yeq = arrayfun(@(U)testfcn(U,tf_Y_params{:},'phifuns',phifun_Y),Uobj_Y,'uni',0);
    lib_Y_Yeq = library('tags',custom_tags_Y,'polys',polys_Y_Yeq,'neg',neg_Y,'boolT',boolT,'nstates',nstates_Y); % library
    lib_X_Yeq = library('tags',custom_tags_X);
    lhs_Yeq = arrayfun(@(i)term('ftag',E(i,:),'linOp',1),(1:nstates_Y)','uni',0);
    [rhs_Y,W_Y,WS_Yeq,lib_X_Yeq,loss_Y,lambda_Y,W_its_Y,res_Y,res_0_Y,CovW_Y] = ...
        hybrid_MI(pmax_X_Yeq,lib_Y_Yeq,lib_X_Yeq,nstates_Y,nstates_X,Uobj_tot,tf_Yeq,lhs_Yeq,...
                    WENDy_args,linregargs_fun_Y,autowendy,tol,tol_min,nY,nX);
    
%%% get Y(T)
    X_sub = find(diff(train_inds)==1);
    subinds = train_inds(X_sub);
    Yend = zeros(length(X_sub),nstates_Y);
    if ~isequal(use_true_IC,'true')
        X_n = X_train(X_sub,:).*nX;
    else
        X_n = X(train_inds(X_sub),:);
    end
    errs_Yend = []; Y_new = {}; Y_ns = cell(length(X_sub),2);
    for n=1:length(X_sub)
        options_ode_sim = odeset('RelTol',tol_dd_learn,'AbsTol',tol_dd_learn*ones(1,nstates_Y),'Events',@(T,Y)myEvent(T,Y,stop_tol*max(max(cell2mat(Y_train))),toggle_zero_crossing));
        rhs_learned = @(y)rhs_Y(y,X_n(n,:));
        Y0 = rhs_IC(X_n(n,:));
        t_train = t_epi{train_inds(X_sub(n))}([1 end]);
        [t_n,Y_n,TE]=ode15s(@(t,x)rhs_learned(x),t_train,Y0,options_ode_sim);
        Y_ns(n,:) = {Y_n,t_n};
        if ismember(X_sub(n),X_in)
            try
                Y_new = [Y_new;{interp1(t_n,Y_n,train_time{X_in==X_sub(n)})./nY}];
                errs_Yend = [errs_Yend;std(Y_new{end}-Y_train{X_in==X_sub(n)})];
                figure(1)
                for i=1:nstates_Y
                    subplot(nstates_Y,1,i)
                    plot(t_n,Y_n(:,i)/nY(i),train_time{X_in==X_sub(n)},Y_train{X_in==X_sub(n)}(:,i)); 
                    legend({'learn','data'})
                end
                drawnow
            catch
                Y_new = [Y_new;{NaN}];
                errs_Yend = [errs_Yend;max(abs(Y_n),'omitnan')];
            end
        % figure(1)
        % for i=1:nstates_Y
        %     subplot(nstates_Y,1,i)
        %     plot(t_n,Y_n(:,i)/nY(i),train_time{X_in==X_sub(n)},Y_train{X_in==X_sub(n)}(:,i),t_epi{train_inds(X_sub(n))},Ycell{train_inds(X_sub(n))}(:,i)/nY(i)); 
        %     legend({'learn','data','true'})
        % end
        % drawnow
        end
        Yend(n,:) = Y_n(end,:);
    end
    Yend = Yend./nY;

%%% get large scale model
    X_Yend = zeros(max(train_inds),nstates_X+nstates_Y);
    X_Yend(train_inds,1:nstates_X) = X_train;
    % Tends = cellfun(@(t)t(end),t_epi(subinds));
    % Yend = cell2mat(arrayfun(@(i)interp1(Y_ns{i,2},Y_ns{i,1},Tends(i))./nY,(1:length(subinds))','uni',0));
    X_Yend(subinds,nstates_X+1:end) = Yend;
    Uobj_X_Yend = wsindy_data(X_Yend,(0:max(train_inds)-1)*yearlength);
    if autowendy>0
        Xn_cov = X_Yend*0; 
        errs_Yend = fillmissing(interp1(train_inds(X_in),errs_Yend,subinds,'linear'),'linear');
        Xn_cov(subinds,1:nstates_X) = X_var(X_sub,:).^2;
        Xn_cov(subinds,nstates_X+1:end) = errs_Yend.^2;
        Uobj_X_Yend.R0 = spdiags(Xn_cov(:),0,numel(Xn_cov),numel(Xn_cov));
    end
    lib_X_Xeq = library('tags',get_tags(polys_X_Xeq,[],nstates_X));
    lib_Y_Xeq = library();
    tf_X = testfcn(Uobj_X_Yend,'meth','direct','param',1/2,'phifuns','delta','mtmin',0,'subinds',subinds);
    lhs = arrayfun(@(i)term('ftag',E(i,:),'linOp',1),(1:nstates_X)','uni',0);
    [rhs_X,W_X,WS_Xeq,lib_Y_Xeq,loss_X,lambda_X,w_its,res_X,res_0_X,CovW_X] = ...
        hybrid_MI(pmax_Y_Xeq,lib_X_Xeq,lib_Y_Xeq,nstates_X,nstates_Y,Uobj_X_Yend,tf_X,lhs,WENDy_args,linregargs_fun_X,autowendy,tol,tol_min,nX,nY);




fprintf('\n runtime: %2.3f \n',toc)

%% compare coefficients

W_Y_compare = inject_coeff_param(W_Y_true,tags_Y_true,tags_X_true, cell2mat(lib_Y_Yeq.tags'),cell2mat(lib_X_Yeq.tags'));
errs_2_Y = norm(reshape([W_Y{:}]-[W_Y_compare{:}],[],1))/norm(reshape([W_Y_compare{:}],[],1));
fprintf('Ydot coeff err: %1.3e \n',errs_2_Y)
errs_inf_Y = abs(reshape([W_Y{:}]-[W_Y_compare{:}],[],1))./abs(reshape([W_Y_compare{:}],[],1));
errs_inf_Y = max(errs_inf_Y(errs_inf_Y<inf),[],'all','omitnan');
if isempty(errs_inf_Y)
    errs_inf_Y = NaN;
end
fprintf('Ydot coeff errInf: %1.3e \n',errs_inf_Y)
tpr_Y = tpscore(reshape([W_Y{:}],[],1),reshape([W_Y_compare{:}],[],1));
fprintf('Ydot TPR: %0.3f \n',tpr_Y)

W_X_compare = inject_coeff_param(W_X_true,tags_Ext_X_true,tags_Ext_Y_true,cell2mat(lib_X_Xeq.tags'),cell2mat(lib_Y_Xeq.tags'));
errs_2_X = norm(reshape([W_X{:}]-[W_X_compare{:}],[],1))/norm(reshape([W_X_compare{:}],[],1));
fprintf('Xn coeff err2: %1.3e \n',errs_2_X)
errs_inf_X = abs(reshape([W_X{:}]-[W_X_compare{:}],[],1))./abs(reshape([W_X_compare{:}],[],1));
errs_inf_X = max(errs_inf_X(errs_inf_X<inf),[],'all','omitnan');
if isempty(errs_inf_X)
    errs_inf_X = NaN;
end
fprintf('Xn coeff errInf: %1.3e \n',errs_inf_X)
tpr_X = tpscore(reshape([W_X{:}],[],1),reshape([W_X_compare{:}],[],1));
fprintf('Xn TPR: %0.3f \n',tpr_X)


%% sim full system
sim_script;

%% extra 
% phifun_Y = @(t)exp(-5*[1./(1-t.^2)-1]);
% phifun_Y = optTFcos(3,0);
% phifun_Y = 'delta'; % test function for continuous data
% tf_Y_params = {'meth','direct','param',1,'mtmin',1};% test function params
